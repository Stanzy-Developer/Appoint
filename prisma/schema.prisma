// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)


model Appointment {
  id        String   @id @default(cuid())

  requestedById  String
  requestedForId  String

  appointmentDate DateTime
  appointmentType AppointmentType
  reason     String
  notes      String?
  status     AppointmentStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  
  requestedBy User   @relation(fields: [requestedById], references: [id], onDelete: Cascade, name:"requestedBy")
  requestedFor User   @relation(fields: [requestedForId], references: [id], onDelete: Cascade, name:"requestedFor")

}

model User {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  phone String
  service      String?
  serviceDscription      String?
  companyName      String?
  verified Boolean @default(false)
  readyForAppointments Boolean @default(false)
  
  requestedAppointments Appointment[]  @relation("requestedBy")
  requestedForAppointments Appointment[]   @relation("requestedFor")
}

enum AppointmentType {
  VIRTUAL
  IN_PERSON
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}